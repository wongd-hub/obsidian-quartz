<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Computer-sciences on</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/</link><description>Recent content in Computer-sciences on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://wongd-hub.github.io/obsidian-quartz/computer-science/index.xml" rel="self" type="application/rss+xml"/><item><title>(Course) CS50x - Harvard OpenCourseWare</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/course-frontmatters/Course-CS50x-Harvard-OpenCourseWare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/course-frontmatters/Course-CS50x-Harvard-OpenCourseWare/</guid><description>#course_cs50 #moc
Instructor: David J. Malan | CS50x 2024
About this course CS50 is Harvard University&amp;rsquo;s introductory course in computer science and programming, designed for both beginners and those with some experience.</description></item><item><title>Abstract Data Types</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Abstract-Data-Types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Abstract-Data-Types/</guid><description>#course_cs50
These are higher level implementations of various data structures, which contrast with the lower level implementations of these structures.</description></item><item><title>Arrays</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Arrays/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Arrays/</guid><description>#course_cs50
We don&amp;rsquo;t want to have to track long lists of numbers in separate variables. An array is a chunk of memory storing values back to back; no gaps or fragmentation between the bytes.</description></item><item><title>ASCII</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/ASCII/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/ASCII/</guid><description>#course_cs50
How do we represent language in a way that can be understood by computers? We can assign numbers to each letter.</description></item><item><title>Binary</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Binary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Binary/</guid><description>#course_cs50
base-2 Our everyday number system is a decimal-based (i.e. base-10) one. Take the number 123 for example, we can think of this as 1 in the 100s slot, 2 in the 10s slot, 3 in the 1s slot; adding them we get 123 Generalising this, each of those slots is 10 to the power of something: $100 = 10^2, 10 = 10^1, 1 = 10^0$ If we wanted to switch to a binary system, i.</description></item><item><title>Bitmap</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Bitmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Bitmap/</guid><description>#course_cs50
Bitmap (.bmp) files are images that implement images by using a grid of x and y co-ordinates - each of which represents a pixel.</description></item><item><title>Bootstrap</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Bootstrap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Bootstrap/</guid><description>#course_cs50</description></item><item><title>C</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/C/</guid><description>#course_cs50 #C
The introductory code block is as follows - in a file named hello.c 1 2 3 4 5 6 #include &amp;lt;stdio.</description></item><item><title>Command Line Arguments for C</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Command-Line-Arguments-for-C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Command-Line-Arguments-for-C/</guid><description>#course_cs50
We can set up a C script to take command line arguments by doing the following: 1 2 3 4 5 6 7 8 9 10 11 12 #include &amp;lt;cs50.</description></item><item><title>Compiler</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Compiler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Compiler/</guid><description>#course_cs50
flowchart LR Source["Source Code"] Empty["Compiler"] Machine["Machine Code"] Source -- Empty -- Machine When we want to compile and execute our C code, we run the following commands: 1 2 make hello .</description></item><item><title>Cryptography</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Cryptography/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Cryptography/</guid><description>#course_cs50
The science of encrypting information Encryption: scrambling information so only you and the recipient can read it graph LR Key -- D["</description></item><item><title>CSS</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/CSS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/CSS/</guid><description>#course_cs50
Stands for Cascading Style Sheets and is a way to specify styling of the webpage.
We&amp;rsquo;re again going to have key-value pairs here, referred to as properties.</description></item><item><title>Debugging</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Debugging/</guid><description>#course_cs50
Bugs are omnipresent even in industry. One of the tools in your toolkit is printf or any logging function.</description></item><item><title>Debugging Memory Issues - malloc() and Valgrind</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Debugging-Memory-Issues-malloc-and-Valgrind/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Debugging-Memory-Issues-malloc-and-Valgrind/</guid><description>#course_cs50
We&amp;rsquo;ve seen that we can use malloc() to [[Memory#Deep copy|assign memory]] before we create objects. For example, let&amp;rsquo;s create a deliberately buggy function.</description></item><item><title>Dictionaries</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Dictionaries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Dictionaries/</guid><description>#course_cs50
A dictionary is a data structure that stores keys and associated values.
There are different ways that we can implement storage of these keys and values.</description></item><item><title>Domain Name System (DNS)</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Domain-Name-System-DNS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Domain-Name-System-DNS/</guid><description>#course_cs50
We&amp;rsquo;re not in the habit of typing out IP addresses to visit web-pages; instead we&amp;rsquo;re typing out domain names such as &amp;lt;www.</description></item><item><title>Dynamic Host Configuration Protocol (DHCP)</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Dynamic-Host-Configuration-Protocol-DHCP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Dynamic-Host-Configuration-Protocol-DHCP/</guid><description>#course_cs50
These answer questions on what your DNS server and router should be. When your device powers up, it broadcasts a request to the DHCP server and receives the answer.</description></item><item><title>Exit Status</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Exit-Status/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Exit-Status/</guid><description>#course_cs50
Every C program has an exit status, a special return value from the program
By default, this is 0 if the process completed successfully Every other integer probably means something bad So far we&amp;rsquo;ve been writing main() with an int return value.</description></item><item><title>File IO</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/File-IO/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/File-IO/</guid><description>There are functions that let us open and manipulate files: fopen() - lets you open a file fclose() fprintf() - lets you print to a file fscanf() - lets you read data not from the keyboard but from a file fread()/fwrite() - read and write data from a file, generally binary data (like images) fseek() - lets you move left to right through a file Example functions Persistent phonebook data [!</description></item><item><title>Garbage Values</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Garbage-Values/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Garbage-Values/</guid><description>#course_cs50
Recall that if you define a variable, but don&amp;rsquo;t assign a value to it at first - what&amp;rsquo;s stored in that variable is a garbage value.</description></item><item><title>Hash Tables</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Hash-Tables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Hash-Tables/</guid><description>#course_cs50
The simplest way to think about hash tables is that they are a combination of [[Arrays|arrays]] and [[Linked Lists|linked lists]] - it is an array of linked lists.</description></item><item><title>Hashing</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Hashing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Hashing/</guid><description>#course_cs50
A hash function is one that takes any number of inputs and maps them to a finite number of outputs.</description></item><item><title>Hexadecimal</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Hexadecimal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Hexadecimal/</guid><description>#course_cs50
We&amp;rsquo;ve already seen [[RGB]] as a way to represent colours; however there&amp;rsquo;s a standard notation for representing this information.</description></item><item><title>HTML</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/HTML/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/HTML/</guid><description>#course_cs50
All about aesthetics and mocking up the structure of web pages. It is a markup language (Hypertext Markup Language).</description></item><item><title>HTTP Status Codes</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/HTTP-Status-Codes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/HTTP-Status-Codes/</guid><description>#course_cs50
There are several status codes that servers can send back, indicating the status of the request. 1** Informational responses 2** Successful responses Code Meaning 200 OK 200 OK All is good.</description></item><item><title>Hypertext Transfer Protocol (HTTP)</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Hypertext-Transfer-Protocol-HTTP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Hypertext-Transfer-Protocol-HTTP/</guid><description>#course_cs50
Governs how web browsers and web servers speak. This protocol standardises what goes into data packet envelopes when it comes to allowing a web browser to request and receive information from a web server.</description></item><item><title>Introduction to Artificial Intelligence</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Introduction-to-Artificial-Intelligence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Introduction-to-Artificial-Intelligence/</guid><description>#course_cs50
[!example] AI is now all around us, with the technology enabling innovations such as the following:
LLMS are all the rage with ChatGPT, Claude, and DeepSeek becoming popular in the last few years.</description></item><item><title>JavaScript</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/JavaScript/</guid><description>#course_cs50
We can use JavaScript to dynamically change the HTML on a webpage in the computer&amp;rsquo;s memory/RAM.</description></item><item><title>Linked Lists</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Linked-Lists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Linked-Lists/</guid><description>#course_cs50
We can stitch things together in memory to solve more interesting problems than just [[Arrays|arrays]].
All we really need for this is:</description></item><item><title>Linux Terminal</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Linux-Terminal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Linux-Terminal/</guid><description>#course_cs50 #linux #bash
Commonly used on servers and personal computers. Particularly characterised by its Command Line Interface (CLI) A few useful commands mentioned in the CS50 lectures: Command Effect clear Clear the terminal window of commands and outputs cd Change working directory cp Copy file or directory ls/ll List files in current directory mkdir Make directory mv Move or rename a file or directory rm Remove file or directory rmdir Remove directory Press the Up arrow to get the last command you typed Press Tab for autocompletion</description></item><item><title>Machine Code</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Machine-Code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Machine-Code/</guid><description>#course_cs50
If a machine can only read binary in the end, how is it reading our instructions? The code we write must be compiled into machine-readable format; which takes our source code, and converts into machine code.</description></item><item><title>Memory</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Memory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Memory/</guid><description>#course_cs50
Type Size bool 1 byte int 4 bytes long 8 bytes float 4 bytes double 8 bytes char 1 byte string ?</description></item><item><title>NULL</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/NULL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/NULL/</guid><description>#course_cs50
NULL is technically a pointer to [[Memory#Memory addresses|memory address]] 0 to signify an error.</description></item><item><title>Passing by Value or Reference</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Passing-by-Value-or-Reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Passing-by-Value-or-Reference/</guid><description>#course_cs50
Passing by Value 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include &amp;lt;stdio.</description></item><item><title>Pointer Arithmetic</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Pointer-Arithmetic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Pointer-Arithmetic/</guid><description>#course_cs50
We&amp;rsquo;ve seen that we can use numeric addresses to represent addresses in memory with [[Memory#Pointers|pointers]].
Since these addresses are numeric, we can do something called pointer arithmetic to manipulate them.</description></item><item><title>Pseudocode</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Pseudocode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Pseudocode/</guid><description>#course_cs50
Used to describe a code algorithm succinctly and accurately. We can break up the example pseudocode below into functions (verbs), control flow (if-else), boolean expressions, and loops.</description></item><item><title>Python</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Python/</guid><description>#course_cs50
We step into the realm of high-level languages now, that abstract away all of the low-level implementation details that we had to think about when working with [[C]].</description></item><item><title>Race Conditions</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Race-Conditions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Race-Conditions/</guid><description>#course_cs50
In the context of SQL Consider the example of the most-liked Instagram post in the world. It&amp;rsquo;s conceivable that Meta is using code similar in spirit to the following to update the number of likes when someone likes the post.</description></item><item><title>Recursion</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Recursion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Recursion/</guid><description>#course_cs50
A recursive function is a function that calls itself. [[Recursion]] is a powerful problem-solving technique: It allows us to tighten up our code and reduce the use of loops It also allows us to utilise the computer&amp;rsquo;s memory in an interesting way An example is the [[Search Algorithms#Binary search|binary search algorithm]] We can see that we use the keyword search in the last two conditions All the while, the inputs are getting cut in half until there is only one left 1 2 3 4 5 6 7 8 If no doors left Return false If 50 is behind doors[middle] Return true Else if 50 &amp;lt; doors[middle] Search doors[0] through doors[middle - 1] Else if 50 &amp;gt; doors[middle] Search doors[middle + 1] through doors[n - 1] First example Writing code to draw a pyramid of $n$ height: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include &amp;lt;cs50.</description></item><item><title>Regular Expressions</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Regular-Expressions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Regular-Expressions/</guid><description>#course_cs50
This allows us to test strings for certain patterns. e.g. &amp;quot;.+@.+\.edu&amp;quot; attempts to match email addresses that have an edu suffix.</description></item><item><title>Relational Databases</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Relational-Databases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Relational-Databases/</guid><description>#course_cs50
It is common to use Comma Separated Values (CSV) to store data in separate tables. These are referred to sometimes as flat files given they only have a 2 dimensional structure.</description></item><item><title>RGB</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/RGB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/RGB/</guid><description>#course_cs50
This is one of the ways we can represent colours as a sequence of numbers. We can generate every colour of the rainbow by varying the amount of Red, Green, and Blue being displayed.</description></item><item><title>Running Time - O(n)</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Running-Time-On/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Running-Time-On/</guid><description>#course_cs50
Computer scientists tend to talk about the order of magnitude of the running time of an algorithm, as a function of the number of inputs We do away with most constants since we&amp;rsquo;re more interested in how much the runtime changes as the number of inputs increases This is called Big O Notation For example, an algorithm with a $O(n)$ runtime will increase in runtime linearly with the number of inputs provided to it.</description></item><item><title>scanf</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/scanf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/scanf/</guid><description>#course_cs50
Getting user input is a difficult problem in C, because you don&amp;rsquo;t know how big of a string (for example) the user will provide.</description></item><item><title>Search Algorithms</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Search-Algorithms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Search-Algorithms/</guid><description>#course_cs50
A computer at the lowest level doesn&amp;rsquo;t have a birds eye view on all the elements in an array.</description></item><item><title>Sorting Algorithms</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Sorting-Algorithms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Sorting-Algorithms/</guid><description>#course_cs50
Selection sort Here, we start at the left of an array and move to the right - making a note of the smallest number seen.</description></item><item><title>SQL</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/SQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/SQL/</guid><description>#course_cs50
Python isn&amp;rsquo;t the most pleasant way to deal with data at scale. Structured Query Language (SQL) is a database-centric language used to query databases.</description></item><item><title>SQL Injection Attacks</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/SQL-Injection-Attacks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/SQL-Injection-Attacks/</guid><description>#course_cs50
Taking user input without first sanitising it can be highly dangerous, and will leave you open to SQL injection attacks.</description></item><item><title>Strings</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Strings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Strings/</guid><description>#course_cs50
Recall that there is always a [[Arrays#Character array|terminating NUL character]] at the end of each string, so each string takes $n + 1$ bytes of memory.</description></item><item><title>Structs</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Structs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Structs/</guid><description>#course_cs50
Create a struct in C using the following syntax: 1 2 3 4 5 6 7 typedef struct { // The contents of this data structure string name; string number; } person; // The name of the struct We can then do things like this: 1 2 3 4 5 6 7 8 9 10 11 12 // Define an array of person structs, pre-allocating 3 items person people[3]; // We then use `.</description></item><item><title>TCP &amp; IP</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/TCP-IP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/TCP-IP/</guid><description>#course_cs50
Internet Protocol (IP) This protocol standardises IP addresses. We stipulate that every single computer connected to the internet in the world has a unique IP address.</description></item><item><title>The Internet</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/The-Internet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/The-Internet/</guid><description>#course_cs50
[!note] In the late &amp;rsquo;60s and &amp;rsquo;70s, the U.S. Department of Defence had a project called ARPANET which allowed computers to talk to each other by exchanging data packets.</description></item><item><title>Trees</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Trees/</guid><description>#course_cs50
[[Arrays]] are problematic since they are a fixed size and can get us into trouble if we want to insert new numbers or items.</description></item><item><title>Tries</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Tries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Tries/</guid><description>#course_cs50
A trie (short for retrieval) is a [[Trees|tree]] of [[Arrays|arrays]].
This gives us $O(1)$ running time, but with a downside.</description></item><item><title>Unicode</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Unicode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Unicode/</guid><description>#course_cs50
Unicode is a superset of ASCII as we realised we need more bits to represent languages, emojis, etc. Unicode&amp;rsquo;s mission is to represent and preserve all human language both past, present, and future.</description></item><item><title>Unix Time</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/Unix-Time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/Unix-Time/</guid><description>#course_cs50
A way that we represent time is with a signed integer of 32 bits tracking the number of seconds since 00:00:00 UTC on 1 January 1970 (the Unix epoch).</description></item><item><title>What is Computer Science?</title><link>https://wongd-hub.github.io/obsidian-quartz/computer-science/What-is-Computer-Science/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/computer-science/What-is-Computer-Science/</guid><description>#course_cs50
Study of information Solving problems with certain ideas and techniques Problem solving is a goal we&amp;rsquo;ll approach with computational thinking Problem solving flowchart LR Input Empty["</description></item></channel></rss>