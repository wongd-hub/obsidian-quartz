<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Data-science-programmings on</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/</link><description>Recent content in Data-science-programmings on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://wongd-hub.github.io/obsidian-quartz/data-science-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>01 DK Containers and their Advantages</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/01-DK-Containers-and-their-Advantages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/01-DK-Containers-and-their-Advantages/</guid><description>#course_datacamp-docker #docker
Advantages of Containers Containers A container is a portable computing environment, it contains everything needed (including dependencies, code, and configuration) to run a workflow or an application.</description></item><item><title>02 DK The Docker Engine</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/02-DK-The-Docker-Engine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/02-DK-The-Docker-Engine/</guid><description>#course_datacamp-docker #docker
Docker is an open-source tool that allows us to create, run, and manage containers. Docker&amp;rsquo;s creation in 2013 caused containers (which already existed) to explode in popularity.</description></item><item><title>03 DK Containers vs. Virtual Machines</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/03-DK-Containers-vs.-Virtual-Machines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/03-DK-Containers-vs.-Virtual-Machines/</guid><description>#course_datacamp-docker #docker
Containers and Virtual Machines Containers and VMs both enable you to run processes side-by-side on the same physical machine without interfering with each other.</description></item><item><title>04 DK Running Docker Containers</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/04-DK-Running-Docker-Containers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/04-DK-Running-Docker-Containers/</guid><description>#course_datacamp-docker #docker
This lesson focuses on starting, stopping, and looking at the output of containers. We&amp;rsquo;ll be using the following shell commands: Command Usage nano &amp;lt;file-name&amp;gt; Opens &amp;lt;file-name&amp;gt; in the nano text editor touch &amp;lt;file-name&amp;gt; Creates an empty file with the specified &amp;lt;file-name&amp;gt; echo &amp;quot;&amp;lt;text&amp;gt;&amp;quot; Print &amp;lt;text&amp;gt; to the console &amp;lt;command&amp;gt; &amp;gt;&amp;gt; &amp;lt;file&amp;gt; Push the output of &amp;lt;command&amp;gt; to the end of &amp;lt;file&amp;gt; &amp;lt;command&amp;gt; -y Automatically respond yes to all prompts from &amp;lt;command&amp;gt; Summary of covered commands: Command Usage docker run &amp;lt;image-name&amp;gt; Run a Docker image docker run -it &amp;lt;image-name&amp;gt; Run a Docker image and gain access to an interactive shell docker run -d &amp;lt;image-name&amp;gt; Run a Docker image in the background with no printed outputs docker ps List all running Docker containers docker stop &amp;lt;container-id&amp;gt; Stop a Docker container The Docker CLI The Docker command line interface sends instructions to the Docker daemon.</description></item><item><title>05 DK Working with Docker containers</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/05-DK-Working-with-Docker-containers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/05-DK-Working-with-Docker-containers/</guid><description>#course_datacamp-docker #docker
Summary of covered commands: Command Usage docker run --name &amp;lt;container-name&amp;gt; &amp;lt;image-name&amp;gt; Run a Docker and give it a &amp;lt;container-name&amp;gt; docker ps -f &amp;quot;name=&amp;lt;container-name&amp;gt;&amp;quot; Filter list of running container based on name docker logs &amp;lt;container-name&amp;gt; See logs for container docker logs -f &amp;lt;container-name&amp;gt; Follow logs live for container docker container rm &amp;lt;container-id&amp;gt; Completely remove a Docker container Listing containers docker ps is useful when working with a handful of containers, but quickly becomes difficult to use when you have more.</description></item><item><title>06 DK Managing Local Docker Images</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/06-DK-Managing-Local-Docker-Images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/06-DK-Managing-Local-Docker-Images/</guid><description>#course_datacamp-docker #docker
All images used to create containers so far have been provided to us. In reality, we will be working with containers we created ourselves, or have downloaded from the community.</description></item><item><title>07 DK Distributing Docker Images</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/07-DK-Distributing-Docker-Images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/07-DK-Distributing-Docker-Images/</guid><description>#course_datacamp-docker #docker
Summary of covered commands: Command Usage docker pull &amp;lt;private-registry-url&amp;gt;/&amp;lt;image-name&amp;gt;:&amp;lt;ver&amp;gt; Pull an image from a private registry docker tag &amp;lt;image-name&amp;gt;:&amp;lt;ver&amp;gt; &amp;lt;private-registry-url&amp;gt;/&amp;lt;image-name&amp;gt;:&amp;lt;ver&amp;gt; Rename an image for pushing to a private registry docker image push &amp;lt;image-name&amp;gt; Push an image to a registry docker login &amp;lt;private-registry-url&amp;gt; Authenticate with a private registry docker save -o &amp;lt;file-name&amp;gt;.</description></item><item><title>08 DK Create your own Docker Images</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/08-DK-Create-your-own-Docker-Images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/08-DK-Create-your-own-Docker-Images/</guid><description>#course_datacamp-docker #docker
Dockerfiles The recipe for each image is contained in a Dockerfile. The first line in any Dockerfile is always a FROM command.</description></item><item><title>09 DK Managing Files in your Image</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/09-DK-Managing-Files-in-your-Image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/09-DK-Managing-Files-in-your-Image/</guid><description>#course_datacamp-docker #docker
We&amp;rsquo;ve seen how to create a Docker image using another image as a starting point, as well as how to run arbitrary shell commands upon build.</description></item><item><title>1.1 Your first Shiny app - Introduction</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/mastering-shiny/1.1-Your-first-Shiny-app-Introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/mastering-shiny/1.1-Your-first-Shiny-app-Introduction/</guid><description/></item><item><title>10 DK Choosing a Start Command for your Image</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/10-DK-Choosing-a-Start-Command-for-your-Image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/10-DK-Choosing-a-Start-Command-for-your-Image/</guid><description>#course_datacamp-docker #docker
The images we&amp;rsquo;ve created so far do not do anything upon running them as containers. In this lesson we&amp;rsquo;ll talk about having the image execute commands once it starts as a container.</description></item><item><title>11 DK Introduction to Docker Caching</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/11-DK-Introduction-to-Docker-Caching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/other/docker/11-DK-Introduction-to-Docker-Caching/</guid><description>#course_datacamp-docker #docker</description></item><item><title>2.1 Names and Values - Introduction</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/2-Names-and-Values/2.1-Names-and-Values-Introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/2-Names-and-Values/2.1-Names-and-Values-Introduction/</guid><description>#textbook_advanced-r #r
It is important to understand the distinction between an object and its name in R. This will help you:</description></item><item><title>2.2 Binding Basics</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/2-Names-and-Values/2.2-Binding-Basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/2-Names-and-Values/2.2-Binding-Basics/</guid><description>#textbook_advanced-r #r
1 x &amp;lt;- c(1, 2, 3) It&amp;rsquo;s easy to read this as &amp;lsquo;create an object named &amp;ldquo;x&amp;rdquo;, containing the values 1, 2, 3&amp;rsquo;, but this is an oversimplification and a misrepresentation of what occurs in the back end.</description></item><item><title>2.3 Copy-on-modify</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/2-Names-and-Values/2.3-Copy-on-modify/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/2-Names-and-Values/2.3-Copy-on-modify/</guid><description>#textbook_advanced-r #r
The following code creates a vector and binds x and y names to that object. It then modifies y.</description></item><item><title>2.4 Object Size</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/2-Names-and-Values/2.4-Object-Size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/2-Names-and-Values/2.4-Object-Size/</guid><description>#textbook_advanced-r #r
You can find how much memory an object takes with lobstr::obj_size().
Elements of lists are just references to values to the following list won&amp;rsquo;t be as large as you might think.</description></item><item><title>2.5 Modify-in-Place</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/2-Names-and-Values/2.5-Modify-in-Place/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/2-Names-and-Values/2.5-Modify-in-Place/</guid><description>#textbook_advanced-r #r
There are some exceptions to when R makes a copy of an object if it gets modified:
Objects with a single name binding get a special performance optimisation Environments (a special type of object) are always modified in place 2.</description></item><item><title>2.6 Unbinding and the Garbage Collector</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/2-Names-and-Values/2.6-Unbinding-and-the-Garbage-Collector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/2-Names-and-Values/2.6-Unbinding-and-the-Garbage-Collector/</guid><description>#textbook_advanced-r #r
When we do this:
1 2 3 x &amp;lt;- 1:3 x &amp;lt;- 2:4 rm(x) We&amp;rsquo;re binding 1:3 to x, then binding 2:4 to x instead, then removing that binding.</description></item><item><title>3.1 Vectors - Introduction</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/3-Vectors/3.1-Vectors-Introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/3-Vectors/3.1-Vectors-Introduction/</guid><description>#textbook_advanced-r #r
Vectors are the most important family of data types in base R. This chapter will go through how all the types fit together as a whole.</description></item><item><title>3.2 Atomic Vectors</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/3-Vectors/3.2-Atomic-Vectors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/3-Vectors/3.2-Atomic-Vectors/</guid><description>#textbook_advanced-r #r
The four primary types of atomic vectors are:
Logical Integer Double Character There are two rarer types, complex (as in complex numbers) and raw (binary data).</description></item><item><title>3.3 Attributes</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/3-Vectors/3.3-Attributes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/3-Vectors/3.3-Attributes/</guid><description>Matrices, arrays, factors, and date-times are all extensions of atomic vectors. We build these constructs by adding attributes on top of atomic vectors.</description></item><item><title>3.4 S3 Atomic Vectors</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/3-Vectors/3.4-S3-Atomic-Vectors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/3-Vectors/3.4-S3-Atomic-Vectors/</guid><description>Another important attribute that vectors can have (in addition to names and dim) is class. If a vector has a class attribute then it becomes an S3 object; which in turn means that it will behave differently when passed through a generic function.</description></item><item><title>3.5 Lists</title><link>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/3-Vectors/3.5-Lists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wongd-hub.github.io/obsidian-quartz/data-science-programming/r/advanced-r/3-Vectors/3.5-Lists/</guid><description/></item></channel></rss>